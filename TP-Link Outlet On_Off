function get-username{
    $username= read-host -prompt " "
    return $username
}

function get-password{
    $creds= Get-Credential -UserName $username -Message "Enter Password"
    $SecurePassword= $creds.Password
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePassword)
    $UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
    return $unsecurepassword
}

function generate-uuid{
    $letters= @("a","b","c","d","e","f")
    $numbers= 0..9
    
    $uuid= ""
    $uuid= $uuid + "$($numbers | get-random -count 5)" + "$($letters | get-random -Count 2)" + '-'
    $uuid= $uuid + "$($letters | get-random -Count 1)" + "$($numbers | get-random -Count 2)" + "$($letters | get-random -Count 1)" + '-'
    $uuid= $uuid + "$($numbers | Get-Random -Count 1)" + "$($letters | Get-Random -count 2)" + "$($numbers | Get-Random -Count 1)" + '-'
    $uuid= $uuid + "$($letters | get-random -Count 2)" + "$($numbers | Get-Random -count 2)" + '-'
    $uuid = $uuid + "$($numbers | Get-Random -count 3)" + "$($letters | get-random -Count 1)" + "$($numbers | Get-Random -count 1)" + "$($letters | Get-Random -count 4)" + "$($numbers | get-random -Count 1)" + "$($letters | get-random -Count 1)"
    $uuid= $uuid-replace(' ','')
    return $uuid
}

function get-token($uuid){
    clear-host
    write-host "Enter your login username/email for TP-Link cloud"

    $username= get-username
    
    clear-host
    write-host "Enter your password for TP-Link cloud"
    $password= get-password
    clear-host

$header = @{
 "Accept"="application/json"
 "Content-Type"="application/json"
}
 
$body = @"
{"method": "login",
 "params": {
 "appType": "Kasa_Android",
 "cloudUserName": "$username",
 "cloudPassword": "$Password",
 "terminalUUID": "$uuid"
 }
}
"@

    $wr= Invoke-WebRequest -Uri "https://wap.tplinkcloud.com" -Method 'Post' -Body $body -Headers $header | ConvertTo-HTML

    $invalid= $wr | select-string "Incorrect email or password"
    
    if ($invalid){
        clear-host
        write-host "Login Failure. Check your username and password and try again."
        pause
        get-token
    }

    $token= $($($wr.split(';') | sls '-')[-1]).tostring()
    $token= $($($token.split(';') | sls '-')[-1]).tostring()-replace('&quot','')
    return $token
}

function get-deviceid($token){
$header = @{
 "Accept"="application/json"
 "Content-Type"="application/json"
}

$body = @'
{"method": "getDeviceList"
}
'@

    $wr= Invoke-WebRequest -uri "https://wap.tplinkcloud.com?token=$token" -Method Post -body $body -Headers $header
    $wr= $($wr.AllElements.innertext | convertto-json).split(',')
    $deviceobj= @()
    $deviceobj+= "Index,Alias,DeviceID"
    $devices= $($wr | select-string "alias" | sort -Unique)

    $x= 1
    foreach ($d in $devices){
        $alias= $($d.tostring().split('"') | where {$_ -ne ':\' -and $_ -ne '\' -and $_ -ne 'alias\'}) | sort -Unique
        $alias= $alias | where {$_}
        $alias= $alias.tostring().trimend('\')

        $config= $wr | select-string $alias -Context (5,5) 
        $deviceid= $($config | convertfrom-csv | select-string deviceId | sort -Unique | select-string '@').tostring()
        $deviceid= $deviceid.split(':')[-1]
        $deviceid= $deviceid.trimstart('\"').TrimEnd('\"}')

        $deviceobj+= "$x, $alias,$deviceid"
        $x++
    }
    $deviceobj= $deviceobj | convertfrom-csv
    $choice= $deviceobj | Out-GridView -Title "Choose Device To Control" -PassThru
    $deviceid= $choice.deviceid
    new-variable -name alldevices -value $deviceobj -scope global -ErrorAction SilentlyContinue
    return $deviceid
}

function show-devices{
    clear-host
    $alldevices
}

function show-currentdevice{
    clear-host
    $alldevices | where {$_.deviceid -eq $deviceid}
}

function change-state([string]$device,[switch]$on, [switch]$off){
    
    if ($off){
        $bin= "0"
        $state= "off"
    }

    if ($on){
        $bin= "1"
        $state= "on"
    }

    if ($on -and $off){
        break
    }

    if ($device){
        $deviceid= $($alldevices | where {$_.alias -eq "$device"}).deviceid
    }

    $header = @{
 "Accept"="application/json"
 "Content-Type"="application/json"
}

$body= @"
{"method": "passthrough",
 "params": {
 "deviceId": "$deviceid",
 "requestData": {
 "system": {
 "set_relay_state": {
 "state": $bin
    }
   }      
  }
 }
}
"@    
    Invoke-WebRequest -uri "https://wap.tplinkcloud.com?token=$token" -Method Post -body $body -Headers $header

    clear-host
    write-host "DeviceID: $deviceid"
    Write-Host "UUID: $uuid"
    write-host "Token: $token"
    write-host "State: $state"
}

#if the required info hasnt been gathered, get it.
if (!$token){
    New-Variable -name uuid -value $(generate-uuid) -force -ErrorAction SilentlyContinue
    new-variable -name token -value $(get-token $uuid) -force -ErrorAction SilentlyContinue -scope global
}

New-Variable -name deviceid -value $(get-deviceid $token) -Force -ErrorAction SilentlyContinue -Scope global
clear-host
write-output "Example commands:"
write-output '>show-currentdevice'
write-output '>change-state -off'
write-output '>change-state -on'
write-output '>show-devices'
write-output '>chage-state -device "<insert_device_name>" -on'
write-output '>change-state -device "<insert_device_name>" -off'
Write-Output ""
